name: CI/CD - Notificaciones Service

on:
  push:
    branches:
      - refactor/desacoplamiento-dominio-persistencia # La rama donde quieres que se ejecute
    paths:
      - 'foro-hub-notifications-service/**' # Se activa solo si hay cambios en esta subcarpeta
  pull_request:
    branches:
      - refactor/desacoplamiento-dominio-persistencia # La rama de destino para Pull Requests
    paths:
      - 'foro-hub-notifications-service/**'
  workflow_dispatch: # Permite ejecutar el workflow manualmente desde GitHub UI

jobs:
  build-test-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read # Permiso para leer el c√≥digo del repositorio
      packages: write # Permiso para escribir (push) im√°genes en GitHub Container Registry

    steps:
      - name: Checkout del c√≥digo
        uses: actions/checkout@v4 # Clona el repositorio

      - name: Debug - Listar contenido del directorio de trabajo
        run: |
          echo "Contenido de ${{ github.workspace }}:"
          ls -R ${{ github.workspace }}
          echo "Directorio actual: $(pwd)"
          ls -R .

      - name: Configurar Java 17 con Maven
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin' # O 'adopt' o 'zulu'
          cache: 'maven' # Cacha las dependencias de Maven para builds m√°s r√°pidos

      - name: Construir el proyecto con Maven (saltando tests)
        # Usa working-directory para cambiar el contexto a la carpeta del servicio.
        working-directory: ./foro-hub-notifications-service
        run: mvn clean install -DskipTests # ¬°IMPORTANTE! Sin -f foro-hub-notifications-service/pom.xml

      - name: Ejecutar pruebas unitarias y de integraci√≥n
        # Usa working-directory para cambiar el contexto.
        working-directory: ./foro-hub-notifications-service
        run: mvn test # ¬°IMPORTANTE! Sin -f foro-hub-notifications-service/pom.xml

      - name: Iniciar sesi√≥n en GitHub Container Registry
        # Utiliza el token de GitHub Actions para autenticarse en GHCR.
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Construir y etiquetar la imagen Docker
        # üîë CAMBIO CLAVE: Ejecutar este paso desde el directorio del microservicio.
        # Esto hace que el contexto de construcci√≥n de Docker sea la carpeta del microservicio.
        working-directory: ./foro-hub-notifications-service # <-- ¬°Aseg√∫rate de que esta l√≠nea est√© presente!
        run: |
          # üö® CORRECCI√ìN CR√çTICA AQU√ç:
          # El Dockerfile ya est√° en el directorio de trabajo actual (gracias a 'working-directory').
          # El '.' al final del comando 'docker build' indica que el contexto de construcci√≥n
          # es el directorio actual, que ahora es 'foro-hub-notifications-service/'.
          # Por lo tanto, el Dockerfile buscar√° 'target/*.jar' dentro de esa carpeta.
          docker build -t ghcr.io/${{ github.repository_owner }}/foro-hub-notifications-service:latest .
          # ^^^ ¬°ASEG√öRATE DE QUE ESTA L√çNEA NO TENGA '-f foro-hub-notifications-service/Dockerfile'!
          #     Solo debe terminar con un punto '.'


      - name: Subir la imagen Docker a GitHub Container Registry
        # Empuja la imagen construida al GHCR.
        run: docker push ghcr.io/${{ github.repository_owner }}/foro-hub-notifications-service:latest

  deploy-to-render:
    needs: build-test-and-push # Este trabajo depende del √©xito del trabajo anterior
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Activar redespliegue en Render
        # Env√≠a una petici√≥n POST al webhook de despliegue de Render.
        # Aseg√∫rate de configurar este secreto en tu repositorio de GitHub.
        run: curl -X POST "${{ secrets.RENDER_HOCK_FORO }}"
